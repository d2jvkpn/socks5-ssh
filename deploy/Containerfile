FROM golang:1-alpine AS builder

ARG APP_Name
ARG APP_Version
ARG GO_ldflags
ARG region

MAINTAINER github.com/d2jvkpn <d2jvkpn@noreply.local>

LABEL app=${APP_Name}
LABEL version=${APP_Version}
LABEL stage=build

#SHELL ["/bin/bash", "-c"]

RUN if [ "$region" = "cn" ]; then \
    echo "==> region: $region"; \
    cp /etc/apk/repositories /etc/apk/repositories.bk; \
    sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories; \
    go env -w GOPROXY="https://goproxy.cn,direct"; \
  fi

RUN apk --no-cache update && \
  apk --no-cache upgrade

WORKDIR /apps

ADD ./main.go ./go.mod ./go.sum ./project.yaml ./
#COPY ./internal ./internal
#COPY ./migrations ./migrations
COPY ./pkg ./pkg
COPY ./proto ./proto
COPY ./bin ./bin
COPY ./deploy ./deploy
ADD ./bin/ssh-socks5.sh /apps/target/

COPY ./cache.local ./cache.local

RUN chmod a+x /apps/target/*.sh

RUN if [ -d ./cache.local/vendor ]; then \
    echo "==> Found cache.local/vendor"; \
    mv ./cache.local/vendor vendor; \
  fi

# in alpine, date doesn't parse %:z
# mkdir -p target && go build -o target/main -ldflags="-w -s ${GO_ldflags}" main.go
RUN mkdir -p target

# note: -trimpath will remove -ldflags
RUN go build -ldflags="-w -s ${GO_ldflags}" -o target/main main.go
ADD ./cache.local/build.yaml /apps/target/

####
FROM alpine:3

ARG APP_Name
ARG APP_Version
ARG region

MAINTAINER github.com/d2jvkpn <d2jvkpn@noreply.local>

LABEL app=${APP_Name}
LABEL version=${APP_Version}
LABEL stage=running

#SHELL ["/bin/bash", "-c"]

ENV APP_Name=${APP_Name}
ENV APP_Version=${APP_Version}
ENV TZ=${TZ:-Asia/Shanghai}

RUN if [ "$region" = "cn" ]; then \
    echo "==> region: $region"; \
    cp /etc/apk/repositories /etc/apk/repositories.bk; \
    sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories; \
  fi

RUN apk --no-cache update && \
  apk --no-cache upgrade && \
  apk --no-cache add \
    tzdata coreutils bash python3 openssl vim openssh curl bind-tools \
    iproute2 stunnel traceroute iptables \
    supervisor socat openvpn wireguard-tools dante-server
    # alternatives: gcompat nmap expect ansible sshpass

RUN mkdir -p /apps/target
WORKDIR /apps

RUN cp /etc/supervisord.conf /etc/supervisord.conf.bk

COPY --from=builder /apps/target/ /apps/target/
ADD ./deploy/supervisord.conf /etc/

# socks5_ssh port
EXPOSE 1080
# file_server port
EXPOSE 1089

# socks5_server port
EXPOSE 1090
# supervisor webui
EXPOSE 1098
# file_server port
EXPOSE 1099

VOLUME ["/apps/configs", "/apps/data", "/apps/logs"]

CMD [./target/main, ssh, -config=configs/prod.yaml, -addr=:1080]
# CMD [config=configs/ssh.conf, ./target/ssh-socks5.sh, remote_host, :1080]
# CMD [supervisord, -l, /apps/logs/supervisord.log, -c, /etc/supervisord.conf]
